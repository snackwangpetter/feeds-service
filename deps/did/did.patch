diff --git a/deps/cjose/CMakeLists.txt b/deps/cjose/CMakeLists.txt
--- a/deps/cjose/CMakeLists.txt
+++ b/deps/cjose/CMakeLists.txt
@@ -69,4 +69,8 @@ else()
         BUILD_COMMAND ${BUILD_CMD} ${BUILD_ARGS}
         INSTALL_COMMAND ${INSTALL_CMD} ${INSTALL_ARGS}
     )
-endif()
\ No newline at end of file
+endif()
+
+if(ENABLE_STATIC)
+    export_static_library(cjose)
+endif()
diff --git a/deps/jansson/CMakeLists.txt b/deps/jansson/CMakeLists.txt
--- a/deps/jansson/CMakeLists.txt
+++ b/deps/jansson/CMakeLists.txt
@@ -28,3 +28,7 @@ if(WIN32)
         )
     endif()
 endif()
+
+if(ENABLE_STATIC)
+    export_static_library(jansson)
+endif()
diff --git a/deps/libzip/CMakeLists.txt b/deps/libzip/CMakeLists.txt
--- a/deps/libzip/CMakeLists.txt
+++ b/deps/libzip/CMakeLists.txt
@@ -28,3 +28,7 @@ ExternalProject_Add(
         -DCMAKE_FIND_ROOT_PATH=${PROJECT_INT_DIST_DIR}
         ${CMAKE_ARGS_INIT}
 )
+
+if(ENABLE_STATIC)
+    export_static_library(zip)
+endif()
diff --git a/hdkey/crypto.c b/hdkey/crypto.c
--- a/hdkey/crypto.c
+++ b/hdkey/crypto.c
@@ -285,7 +285,7 @@ ssize_t base64_url_decode(uint8_t *buffer, const char *base64)
 
     return len; //success
 }
-ssize_t base58_encode(char *base58, size_t base58_len, uint8_t *input, size_t len)
+ssize_t hdkey_base58_encode(char *base58, size_t base58_len, uint8_t *input, size_t len)
 {
     if (!base58 || base58_len <= 0 || !input || !len)
         return -1;
@@ -297,7 +297,7 @@ ssize_t base58_encode(char *base58, size_t base58_len, uint8_t *input, size_t le
     return BRBase58Encode(base58, size, input, len);
 }
 
-ssize_t base58_decode(uint8_t *data, size_t len, const char *base58)
+ssize_t hdkey_base58_decode(uint8_t *data, size_t len, const char *base58)
 {
     if (!data || len <= 0 || !base58)
         return -1;
diff --git a/hdkey/crypto.h b/hdkey/crypto.h
--- a/hdkey/crypto.h
+++ b/hdkey/crypto.h
@@ -54,9 +54,9 @@ ssize_t base64_url_encode(char *base64, const uint8_t *input, size_t len);
 
 ssize_t base64_url_decode(uint8_t *buffer, const char *base64);
 
-ssize_t base58_encode(char *base58, size_t base58_len, uint8_t *input, size_t len);
+ssize_t hdkey_base58_encode(char *base58, size_t base58_len, uint8_t *input, size_t len);
 
-ssize_t base58_decode(uint8_t *data, size_t len, const char *base58);
+ssize_t hdkey_base58_decode(uint8_t *data, size_t len, const char *base58);
 
 int sha256_digest_init(Sha256_Digest *sha256_digest);
 
@@ -84,4 +84,4 @@ int ecdsa_verify_base64(char *sig, uint8_t *publickey, uint8_t *digest, size_t s
 }
 #endif
 
-#endif //__CRYPTO_H__
\ No newline at end of file
+#endif //__CRYPTO_H__
diff --git a/src/diddocument.c b/src/diddocument.c
--- a/src/diddocument.c
+++ b/src/diddocument.c
@@ -1286,7 +1286,7 @@ int DIDDocumentBuilder_AddPublicKey(DIDDocumentBuilder *builder, DIDURL *keyid,
         return -1;
     }
     //check base58 is valid
-    if (base58_decode(binkey, sizeof(binkey), key) != PUBLICKEY_BYTES) {
+    if (hdkey_base58_decode(binkey, sizeof(binkey), key) != PUBLICKEY_BYTES) {
         DIDError_Set(DIDERR_INVALID_KEY, "Decode public key failed.");
         return -1;
     }
@@ -1362,7 +1362,7 @@ int DIDDocumentBuilder_AddAuthenticationKey(DIDDocumentBuilder *builder,
         return -1;
     }
 
-    if (key && base58_decode(binkey, sizeof(binkey), key) != PUBLICKEY_BYTES) {
+    if (key && hdkey_base58_decode(binkey, sizeof(binkey), key) != PUBLICKEY_BYTES) {
         DIDError_Set(DIDERR_INVALID_KEY, "Decode authentication key failed.");
         return -1;
     }
@@ -1484,7 +1484,7 @@ int DIDDocumentBuilder_AddAuthorizationKey(DIDDocumentBuilder *builder, DIDURL *
         return -1;
     }
 
-    if (key && base58_decode(binkey, sizeof(binkey), key) != PUBLICKEY_BYTES) {
+    if (key && hdkey_base58_decode(binkey, sizeof(binkey), key) != PUBLICKEY_BYTES) {
         DIDError_Set(DIDERR_INVALID_KEY, "Decode public key failed.");
         return -1;
     }
@@ -2010,7 +2010,7 @@ DIDURL *DIDDocument_GetDefaultPublicKey(DIDDocument *document)
         if (DID_Equals(&pk->controller, &document->did) == 0)
             continue;
 
-        base58_decode(binkey, sizeof(binkey), pk->publicKeyBase58);
+        hdkey_base58_decode(binkey, sizeof(binkey), pk->publicKeyBase58);
         HDKey_PublicKey2Address(binkey, idstring, sizeof(idstring));
 
         if (!strcmp(idstring, pk->id.did.idstring))
@@ -2557,7 +2557,7 @@ int DIDDocument_VerifyDigest(DIDDocument *document, DIDURL *keyid,
         return -1;
     }
 
-    base58_decode(binkey, sizeof(binkey), PublicKey_GetPublicKeyBase58(publickey));
+    hdkey_base58_decode(binkey, sizeof(binkey), PublicKey_GetPublicKeyBase58(publickey));
 
     if (ecdsa_verify_base64(sig, binkey, digest, size) == -1) {
         DIDError_Set(DIDERR_CRYPTO_ERROR, "Ecdsa verify failed.");
diff --git a/src/didstore.c b/src/didstore.c
--- a/src/didstore.c
+++ b/src/didstore.c
@@ -638,7 +638,7 @@ static int store_extendedpubkey(DIDStore *store, uint8_t *extendedkey, size_t si
     assert(store);
     assert(extendedkey && size > 0);
 
-    if (base58_encode(publickeybase58, sizeof(publickeybase58), extendedkey, size) == -1) {
+    if (hdkey_base58_encode(publickeybase58, sizeof(publickeybase58), extendedkey, size) == -1) {
         DIDError_Set(DIDERR_CRYPTO_ERROR, "Decode extended public key failed.");
         return -1;
     }
@@ -679,7 +679,7 @@ static ssize_t load_extendedpubkey(DIDStore *store, uint8_t *extendedkey, size_t
     if (!string)
         return -1;
 
-    len = base58_decode(extendedkey, size, string);
+    len = hdkey_base58_decode(extendedkey, size, string);
     free((void*)string);
     if (len < 0)
         DIDError_Set(DIDERR_CRYPTO_ERROR, "Decode extended public key failed.");
diff --git a/src/jwt/jwsparser.c b/src/jwt/jwsparser.c
--- a/src/jwt/jwsparser.c
+++ b/src/jwt/jwsparser.c
@@ -86,7 +86,7 @@ static cjose_jwk_t *get_jwk(JWSParser *parser, JWT *jwt)
     if (!keybase58)
         goto errorExit;
 
-    base58_decode(binkey, sizeof(binkey), keybase58);
+    hdkey_base58_decode(binkey, sizeof(binkey), keybase58);
 
     memset(&_spec, 0, sizeof(KeySpec));
     spec = KeySpec_Fill(&_spec, binkey, NULL);
diff --git a/src/jwt/jwtbuilder.c b/src/jwt/jwtbuilder.c
--- a/src/jwt/jwtbuilder.c
+++ b/src/jwt/jwtbuilder.c
@@ -305,7 +305,7 @@ int JWTBuilder_Sign(JWTBuilder *builder, DIDURL *keyid, const char *storepass)
         DIDError_Set(DIDERR_NOT_EXISTS, "Key no exist.");
         return -1;
     }
-    base58_decode(pubkey, sizeof(pubkey), PublicKey_GetPublicKeyBase58(pk));
+    hdkey_base58_decode(pubkey, sizeof(pubkey), PublicKey_GetPublicKeyBase58(pk));
 
     //get sk
     if (!DIDStore_ContainsPrivateKey(builder->doc->metadata.base.store, issuer, keyid))
